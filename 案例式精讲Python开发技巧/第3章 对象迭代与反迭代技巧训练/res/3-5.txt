Installing Distributions

There are several ways to install packages from PyPI into your Python installation:

Pip

Pip is a modern, general purpose installation tool for python packages. Most often it is useful to install it in your system python.

Instructions for installing pip can be found on its relevant documentation page.

Some example, hopefully self-evident commands:

$ pip install requests
$ pip search xml
$ pip show beautifulsoup4
$ pip uninstall requests
Python's distutils

distutils comes with python and can be used for basic functionality.

Download the distribution, extract it, get to a command prompt and type:

$ python setup.py install
The distribution will be installed into 'site-packages' directory of the Python interpreter used to run the 'setup.py install' command.

Note that distutils doesn't install any dependencies! You will have to do so yourself. Pip will do this for you.

Quite often you may see the following line in install instructions:

$ sudo python setup.py install
Be very careful when running this command! Packages and scripts installed with 'sudo' will be placed in a operating system specific location, and this may break your operating system. Furthermore, the *distutils does not have an uninstall command*, so if you do break anything, it may be not that easy to restore it back to working condition!

There are two ways to avoid having to install as the root user:

Per-user site-packages
If using Python 2.6 or greater, a per-user 'site-packages' directory is available. This may interfere with applications supplied by your operating system, but this interference is limited to only the user account which was used to install these packages with. Other user accounts (including the root user) should be left untouched.
VirtualEnv
The VirtualEnv tool allows you to clone your system Python, so that you have a complete, isolated copy of Python available for installing into. Typically you will install the 'virtualenv' distribution as root, but it is possible to extract the virtualenv.py module from the 'virtualenv' distribution and also create virtual environments without having to use the root account at all.
Buildout

Buildout is a configuration-driven build tool designed for automating application installation. It has a number of recipes that allow you to declare the working set(s) of packages required for a Python application, and automatically install them.

Please see Buildout for more information.

What the Package Index Stores

The Python Package Index stores information about packages of Python software and releases themselves. Each package has a name and a number of release versions. The list of release versions will increase as newer versions of the package are submitted to the Package Index.

Submitting Packages to the Package Index

If you have some Python modules or packages that you would like to share with the Python community, we'd love to have them included in the Python Package Index! First, if you haven't done so, you will want to get your project organized. You might follow the guidelines at ProjectFileAndDirectoryLayout. After that, you'll want to read the Python documentation regarding creating distributions: http://docs.python.org/distutils/index.html.

There is also an example project http://pypi.python.org/pypi/an_example_pypi_project

There are two types of information that may be submitted to the Package Index:

package meta-data (name, version, description, etc), and
package source and binary distribution files.
Package Meta-Data

You may submit package meta-data either by:

writing a setup.py file and using "python setup.py register" (see docs),
creating a PKG-INFO file (typically generated from a setup.py file) and uploading it, or
using the web form and manually entering the information.
The Package Index assumes that the PKG-INFO file is either ASCII or UTF-8.

If you choose to make use of the setuptools installation system, there are more useful options you can include to aid in the installation of your software, like specifying other packages that yours depends on before it will install.

Selecting Classifiers

View the complete list of classifiers you may choose from.

See the meta-data docs for details about how to include them in your setup.py file.

PyPI will attempt to parse the "long_description" from your meta-data as reStructuredText. If this fails, it will be presented to users as plain text (all whitespace and formatting retained).

Missing Classifier?

Is a classifier you need missing from the classifiers list?

Python frameworks with plugins or packages that target the framework can get their own category. The category should only be added after such packages exist.

Complementary packages can link to each other from their descriptions, they do not need a category to link them together; only when packages are provided by different people does a category need to be created.

To ask for a category email catalog-sig@python.org .

Package Distribution Files

Note that submitting a package distribution file automatically submits the package's meta-data. You may submit package distribution files either by:

appending the "upload" command to a setup.py source dist or built dist command, eg "python setup.py sdist upload", or
logging into the Package Index and using the package management interface to manually upload files.
The "upload" command has a number of options, including being able to sign the upload using GPG. See "python setup.py upload --help" for more information.

Exposing Multiple Releases

When a new release of a package is submitted to the Package Index, all previous releases of that package are hidden from the display. This means that listings and searches will no longer find those releases.

You may use the package admin interface to un-hide releases. This may be useful if you have both a stable and a development release active at the same time. These will be hidden again on the next submission of meta-data.